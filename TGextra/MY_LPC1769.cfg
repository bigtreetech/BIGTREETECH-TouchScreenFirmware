#**************************************************************************************
# TG modified for working with LPC1769 on MKS SGEN V1.0 board  1/27/20
#
# This config can be used for openocd when running platformio debug or upload.
# If you want different actions for one or the other you will have to insert
# some conditional coding in the "commands to run" area below.
#
#**************************************************************************************

# set this 0=no echo  1=echo
set _ECHO 1  

# define unique values for the LPC1769
set CPURAMSIZE 0x10000
set CPUROMSIZE 0x80000
set CHIPNAME lpc17xx
set CHIPSERIES lpc1700
#For the LPC1769, the TAP ID value is 0x2BA00477.
#set CPUTAPID 0x4ba00477		
set CPUTAPID 0x2ba01477
#CCLK is also set to 4000 khz in the lpc1xxx cfg file later if not set here
set CCLK 12000

# check for variables sent from the calling task
#****************************************************************************
#**********     Check for variables sent from the calling task     **********
#****************************************************************************
# FIRMWARENAME is added at the UPLOADER command string in the extra_scripts "lpc17xx_helper.py" file in Platformio.ini
# if task is Debug, then it is added from the debug_server flags in Platformio.ini (but has .elf extension)
if { [info exists FIRMWARENAME] } {
	set _IMAGEFILE $FIRMWARENAME
	} else {
	error "FIRMWARENAME not set"
}
if {$_ECHO} {echo "MY_LPC1769.CFG: FIRMWARENAME received: $_IMAGEFILE"}

# if extension is .elf, change it to .bin
if { [string first .elf $_IMAGEFILE] > 0} {
	set _noext [string trimright $_IMAGEFILE elf]
	set _IMAGEFILE [append _noext bin]
if {$_ECHO} {echo "MY_LPC1769.CFG: FIRMWARENAME renamed to: $_IMAGEFILE"}
}

# LOADADDRESS is added from the debug_server flags in Platformio.ini in Debug task
# if task is Upload, it's added via UPLOADER command string in the extra_scripts "lpc17xx_helper.py" file in Platformio.ini
# note: changing the load adress requires modifying the VTOR at address 0xE000ED08 at bits [29:8] (1st 8 bits{7:0] are reserved)
if { [info exists LOADADDRESS] } {
	set _LOADADDRESS $LOADADDRESS
} else {
    set _LOADADDRESS 0x00000000
	if {$_ECHO} {echo "MY_LPC1769.CFG: LOADADDRESS not given...defaulting to 0x00000000"}
}
if {$_ECHO} {echo "MY_LPC1769.CFG: LOADADDRESS received: $_LOADADDRESS"}

# CALLER is added from the debug_server flags in Platformio.ini in Debug and Upload tasks
# if task is Upload, it's added via UPLOADER command string in the extra_scripts "lpc17xx_helper.py" file in Platformio.ini
if { [info exists CALLER] } {
	set _CALLER $CALLER
} else {
    set _CALLER UNKNOWN
	error "MY_LPC1769.CFG: CALLER not set in Platformio.ini under debug_server or upload_flags"
}
if {$_ECHO} {echo "MY_LPC1769.CFG: CALLER received: $_CALLER"}

#****************************************************************************
#**********  End of Check for variables sent from the calling task  *********
#****************************************************************************



#include the interface file for the target, stlink (for STM32F) or cmsis-dap (for LPC17xx)
if {$_ECHO} {echo "MY_LPC1769.CFG: loading interface/stlink.cfg]"}
#source [find interface/stlink.cfg] 
source [find interface/cmsis-dap.cfg]

#for NXP 17xx MCU-Link use this
set _TRANSPORT swd

#for STM32 ST-Link use one of these
#set _TRANSPORT hla_swd

transport select $_TRANSPORT

#Include the main configuration file for the target
if {$_ECHO} {echo "MY_LPC1769.CFG: loading target/lpc17xx.cfg]"}
source [find target/lpc17xx.cfg]

adapter speed 4000
#delays on reset line
adapter srst delay 200


#gdb_memory_map enable
#gdb_breakpoint_override hard 
#init
#cortex_m maskisr steponly

 
#****************************************************************************
#********** Procedures that can be called to simplify some actions **********
#****************************************************************************
# Magic to work with any targets, including semi-functional
global _ERASE_CALLED 0
set _ERASE_CALLED 0
proc prepare_target { } {
    global _ECHO
    if {$_ECHO} {echo "MY_LPC1769.CFG: initialze target....."}
	init
    catch {reset init}
    #catch {halt}
}
# unlock was in here but not supported on stlink
proc erase_part { start_sector end_sector } {
    global _ERASE_CALLED
	global _ECHO
	if {$_ECHO} {echo "MY_LPC1769.CFG: erase target....."}
    flash erase_sector 0 $start_sector $end_sector
	flash erase_check 0
    if {$_ECHO} {echo "MY_LPC1769.CFG: erase complete....."}
    set _ERASE_CALLED 1	
}
proc dump_part { filename start_adr } {
    global _ECHO
    if {$_ECHO} {echo "MY_LPC1769.CFG: dumping target....."}
	dump_image $filename $start_adr $start_adr
}
proc flash_part { filename start_adr } {
    global _ERASE_CALLED
	global _ECHO
	if { !$_ERASE_CALLED } {
		erase_part 0 29
	}
    if {$_ECHO} {echo "MY_LPC1769.CFG: flashing target....."}
	set result [catch {flash write_image $filename $start_adr bin}] 
	if {$result != 0} {
	  error "MY_LPC1769.CFG: Houston - we have a problem - flashing failed!"
	} else { 
		if {$_ECHO} {echo "MY_LPC1769.CFG: flashing complete!"} 
		set _ERASE_CALLED 0
	}
	mww 0x400FC040 0x01
}
proc verify_flash { filename offset} { 
   global _ECHO
   verify_image $filename $offset
}
proc eraser {} { 
   global _ECHO
   #unlock
   if {$_ECHO} {echo "MY_LPC1769.CFG: erase target....."}
   flash erase_sector 0 0 5
   if {$_ECHO} {echo "MY_LPC1769.CFG: checking if erased....."}
   flash erase_check 0
}
proc unlock {} {
	global _ECHO
	if {$_ECHO} {echo "MY_LPC1769.CFG: attempting to unlock flash....."}
	flash protect 0 0 last off
}


#****************************************************************************
#****************************************************************************
#*********  TEST AREA for customized GDB events  ****************************
#****************************************************************************
#****************************************************************************
proc my_GDB_flash_erase_start { } {echo "*****GDB erashing flash.."}
$CHIPNAME.cpu configure -event gdb-flash-erase-start my_GDB_flash_erase_start

proc my_GDB_flash_erase_end { } {echo "*****GDB erashing done.."}
$CHIPNAME.cpu configure -event gdb-flash-erase-end my_GDB_flash_erase_end

proc my_GDB_flash_write_start { } {echo "*****GDB writing flash.."}
$CHIPNAME.cpu configure -event gdb-flash-write-start my_GDB_flash_write_start

proc my_GDB_flash_write_end { } {echo "\n*****GDB writing done.."}
$CHIPNAME.cpu configure -event gdb-flash-write-end my_GDB_flash_write_end

proc my_GDB_step_start { } {echo "*****GDB stepping start.."}
$CHIPNAME.cpu configure -event step-start my_GDB_step_start

proc my_GDB_step_end { } {echo "*****GDB stepping end.."}
$CHIPNAME.cpu configure -event step-end my_GDB_step_end

proc my_GDB_debug_halted { } {echo -n "h"}
$CHIPNAME.cpu configure -event debug-halted my_GDB_debug_halted

proc my_GDB_debug_resumed { } {echo -n "r"}
$CHIPNAME.cpu configure -event debug-resumed my_GDB_debug_resumed

proc my_GDB_halted { } {echo "*****GDB target halted"}
$CHIPNAME.cpu configure -event halted my_GDB_halted

proc my_GDB_resumed { } {echo "*****GDB target resumed"}
$CHIPNAME.cpu configure -event resumed my_GDB_resumed





#****************************************************************************
#****************************************************************************
#***** commands to run area (in order of preference - choose only one!) *****
#****************************************************************************
#****************************************************************************

#for either UPLOAD or DEBUG process we must call "init and reset-init" before
#any other reset commands will work
# for the UPLOAD process we need to program the flash and shutdown
if {[string equal $_CALLER UPLOAD]} {
	# do the init / reset-init / reset-halt sequence as first step
	prepare_target
	after 100
	#------- #1 try program command method (highest level code) -----------------
	# the program command does init/reset init/flash_write_image to erase & write
	# to flash/verify if specified/and reset run if reset specified
	if {$_ECHO} {echo "MY_LPC1769.CFG: run program command"}
	program $_IMAGEFILE verify reset $_LOADADDRESS
	if {$_ECHO} {echo "MY_LPC1769.CFG: end program command"}

	#comment out shutdown if you want to keep openocd running to use Telnet to interact
	if {$_ECHO} {echo "MY_LPC1769.CFG: reset-run and shutdown"}
	reset run
	shutdown	 
	}

# for the DEBUG process let GDB do the uploading, note: gdb_flash_program must precede init
# cortex_m command must come after init
if {[string equal $_CALLER DEBUG]} {
	if {$_ECHO} {echo "MY_LPC1769.CFG: setting gdb_ options"}
	gdb_flash_program enable
	gdb_memory_map enable
	gdb_breakpoint_override hard 
	prepare_target
	#this can be auto or steponly
	cortex_m maskisr auto 
	if {$_ECHO} {echo "MY_LPC1769.CFG: set gdb_flash_program enable"}
	if {$_ECHO} {echo "MY_LPC1769.CFG: debug - reset-halt"}
	reset halt
}



# These are other methods that can be used to program the flash
#------- #2 THIS method works too (intermediate calls proc's above) ---------
#flash_part $_IMAGEFILE $_LOADADDRESS
#verify_flash $_IMAGEFILE $_LOADADDRESS
#if {$_ECHO} {echo "MY_LPC1769.CFG: reset-init target for User Mode vectors"}
#reset init
#reset run

#------- #3 try init/reset/flash write method (lowest level calls) ----------
#if {$_ECHO} {echo "MY_LPC1769.CFG: Sending command: init"}
#init
#if {$_ECHO} {echo "MY_LPC1769.CFG: Sending command: reset init"}
#reset init   
#if {$_ECHO} {echo "MY_LPC1769.CFG: Sending command: flash write_image erase $_IMAGEFILE $_LOADADDRESS bin"}
#flash erase_sector 0 0 29
#flash write_image $_IMAGEFILE $_LOADADDRESS bin

#---------- reset option and shutdown methods -----------
#if {$_ECHO} {echo "MY_LPC1769.CFG: reset-init target for User Mode vectors"}
# always do reset-init, but check if DEBUG or UPLOAD for next actions
#reset init


#****************************************************************************
#********** end commands to run area ****************************************
#****************************************************************************